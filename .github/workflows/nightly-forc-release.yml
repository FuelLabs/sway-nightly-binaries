name: Forc Release (nightly) 

on:
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * *'

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always
  REGISTRY: ghcr.io

jobs:
  release:
    runs-on: ubuntu-latest
    name: Prepare release
    outputs:
      upload_url: ${{ steps.create-release.outputs.upload_url }}
      today: ${{ steps.set-date.outputs.today }}
      tag: ${{ steps.set-tag.outputs.tag }}
      name: ${{ steps.set-name.outputs.name }}
    steps:
      - name: Checkout sources
        uses: actions/checkout@v3
        with:
          repository: FuelLabs/sway
          fetch-depth: 0

      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable

      - name: Set current date
        id: set-date
        run: |
          TODAY=$(date +'%Y-%m-%d')
          echo "::set-output name=today::$TODAY"
          echo "::set-output name=yesterday::$(date --date="$TODAY -1 day" +'%Y-%m-%d')"

      - name: Set commit hash
        id: set-commit-hash
        run: |
          echo "::set-output name=commit_hash::$(git rev-parse --short HEAD)"

      - name: Install cargo-edit
        uses: actions-rs/cargo@v1
        with:
          command: install
          args: cargo-edit

      - name: Bump patch version and add nightly pre-release tag
        uses: actions-rs/cargo@v1
        with:
          command: set-version
          args: --metadata nightly.${{  steps.set-date.outputs.today }}.${{ steps.set-commit-hash.outputs.commit_hash }}

      - name: Set tag 
        id: set-tag
        run: |
          LATEST_TAG=$(git describe --tags --abbrev=0)
          # trim v
          LATEST_TAG="${LATEST_TAG#v}"
          echo "::set-output name=tag::$LATEST_TAG"

      - name: Set name
        id: set-name
        run: |
          NAME=forc-binaries-${{ steps.set-tag.outputs.tag }}+nightly.${{ steps.set-date.outputs.today }}.${{ steps.set-commit-hash.outputs.commit_hash }}
          echo "::set-output name=name::$NAME"

      - name: Checkout sources
        uses: actions/checkout@v3
        with:
          path: scripts

      - name: Create release notes
        run: |
          ./scripts/.github/workflows/scripts/write-release-notes.sh sway ${{ steps.set-date.outputs.yesterday }} ${{ steps.set-date.outputs.today }} 

      - name: Create Release
        id: create-release
        uses: ncipollo/release-action@v1
        with:
          name: ${{ steps.set-name.outputs.name }}
          tag: ${{ steps.set-name.outputs.name }}
          allowUpdates: true
          removeArtifacts: true
          bodyFile: "body.md"
          draft: false 
          token: ${{ secrets.GITHUB_TOKEN }}

  install-and-upload-forc-binaries:
    name: Install and upload forc binaries to release
    needs: release
    runs-on: ${{ matrix.job.os }}
    strategy:
      matrix:
        job:
          - os: ubuntu-latest
            platform: linux
            target: x86_64-unknown-linux-gnu
            arch: amd64
            svm_target_platform: linux-amd64
          - os: ubuntu-latest
            platform: linux
            target: aarch64-unknown-linux-gnu
            arch: arm64
            svm_target_platform: linux-aarch64
          - os: macos-latest
            platform: darwin
            target: x86_64-apple-darwin
            arch: amd64
            svm_target_platform: macosx-amd64
          - os: macos-latest
            platform: darwin
            target: aarch64-apple-darwin
            arch: arm64
            svm_target_platform: macosx-aarch64
    steps:
      - name: Checkout sources
        uses: actions/checkout@v3
        with:
          repository: fuellabs/sway

      - name: Install toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          target: ${{ matrix.job.target }}
          override: true

      - uses: Swatinem/rust-cache@v1
        with:
          cache-on-failure: true

      - name: Apple M1 setup
        if: ${{ matrix.job.target == 'aarch64-apple-darwin' }}
        run: |
          echo "SDKROOT=$(xcrun -sdk macosx --show-sdk-path)" >> $GITHUB_ENV
          echo "MACOSX_DEPLOYMENT_TARGET=$(xcrun -sdk macosx --show-sdk-platform-version)" >> $GITHUB_ENV
      - name: Linux ARM setup
        if: ${{ matrix.job.target == 'aarch64-unknown-linux-gnu' }}
        run: |
          sudo apt-get update -y
          sudo apt-get install -y gcc-aarch64-linux-gnu
          echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV

      - name: Install Forc
        uses: actions-rs/cargo@v1
        with:
          command: install
          args: --profile=release --path ./forc

      - name: Install Forc-Fmt
        uses: actions-rs/cargo@v1
        with:
          command: install
          args: --profile=release --path ./forc-plugins/forc-fmt

      - name: Install Forc-LSP
        uses: actions-rs/cargo@v1
        with:
          command: install
          args: --profile=release --path ./forc-plugins/forc-lsp

      - name: Install Forc-Explore
        uses: actions-rs/cargo@v1
        with:
          command: install
          args: --profile=release --path ./forc-plugins/forc-explore

      - name: Install Forc-Client
        uses: actions-rs/cargo@v1
        with:
          command: install
          args: --profile=release --path ./forc-plugins/forc-client

      - name: Prep Assets
        id: prep_assets
        env:
          PLATFORM_NAME: ${{ matrix.job.platform }}
          TARGET: ${{ matrix.job.target }}
          ARCH: ${{ matrix.job.arch }}
        run: |
          ZIP_FILE_NAME=${{ needs.release.outputs.name }}-${{ env.PLATFORM_NAME }}_${{ env.ARCH }}.tar.gz
          echo "ZIP_FILE_NAME=$ZIP_FILE_NAME" >> $GITHUB_ENV
          mkdir -pv ./forc-binaries
          for binary in forc forc-fmt forc-lsp forc-explore forc-deploy forc-run; do
            cp $(which ${binary}) ./forc-binaries
          done
          tar -czvf $ZIP_FILE_NAME ./forc-binaries

      - name: Archive forc binaries
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ needs.release.outputs.upload_url }}
          asset_path: ./${{ env.ZIP_FILE_NAME }}
          asset_name: ${{ env.ZIP_FILE_NAME }}
          asset_content_type: application/gzip
