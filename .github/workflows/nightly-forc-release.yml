name: Forc Release (nightly) 

on:
  workflow_dispatch:
  workflow_call:
    inputs:
      upload_url:
        required: true
        type: string
      date:
        required: true
        type: string

env:
  CARGO_TERM_COLOR: always
  REGISTRY: ghcr.io

jobs:
  prepare-release:
    runs-on: ubuntu-latest
    name: Prepare release
    outputs:
      tag: ${{ steps.set-tag.outputs.tag }}
      zip_name: ${{ steps.set-name.outputs.zip_name }}
      commit_hash: ${{ steps.set-commit-hash.outputs.commit_hash }}
    steps:
      - name: Checkout sources
        uses: actions/checkout@v3
        with:
          repository: FuelLabs/sway
          fetch-depth: 0

      - name: Set commit hash
        id: set-commit-hash
        run: |
          echo "::set-output name=commit_hash::$(git rev-parse --short=10 HEAD)"

      - name: Set tag 
        id: set-tag
        run: |
          LATEST_TAG=$(git describe --tags --abbrev=0)
          # trim v
          LATEST_TAG="${LATEST_TAG#v}"
          echo "::set-output name=tag::$LATEST_TAG"

      - name: Set name
        id: set-name
        run: |
          NAME=forc-binaries-${{ steps.set-tag.outputs.tag }}+nightly.${{ inputs.date }}.${{ steps.set-commit-hash.outputs.commit_hash }}
          echo "::set-output name=zip_name::$NAME"

  install-and-upload-forc-binaries:
    name: Install and upload forc binaries to release
    needs: prepare-release
    runs-on: ${{ matrix.job.os }}
    strategy:
      fail-fast: false
      matrix:
        job:
          - os: ubuntu-latest
            platform: linux
            target: x86_64-unknown-linux-gnu
            arch: amd64
            svm_target_platform: linux-amd64
          - os: ubuntu-latest
            platform: linux
            target: aarch64-unknown-linux-gnu
            arch: arm64
            svm_target_platform: linux-aarch64
          - os: macos-latest
            platform: darwin
            target: x86_64-apple-darwin
            arch: amd64
            svm_target_platform: macosx-amd64
          - os: macos-latest
            platform: darwin
            target: aarch64-apple-darwin
            arch: arm64
            svm_target_platform: macosx-aarch64
    steps:
      - name: Checkout sources
        uses: actions/checkout@v3
        with:
          repository: fuellabs/sway

      - name: Install toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          target: ${{ matrix.job.target }}
          override: true

      - uses: Swatinem/rust-cache@v1
        with:
          cache-on-failure: true
          key: "${{ matrix.job.target }}"

      - name: Install cargo-edit
        uses: actions-rs/cargo@v1
        with:
          command: install
          args: cargo-edit

      - name: Bump patch version and add nightly pre-release tag
        uses: actions-rs/cargo@v1
        with:
          command: set-version
          args: --metadata nightly.${{ inputs.date }}.${{ needs.prepare-release.outputs.commit_hash }}

      - name: Use Cross
        uses: baptiste0928/cargo-install@v1
        with:
          crate: cross
          cache-key: "${{ matrix.job.target }}"

      - name: Build forc binaries
        run: |
          cross build --profile=release --locked --target ${{ matrix.job.target }} --bins

      - name: Prep Assets
        id: prep_assets
        env:
          PLATFORM_NAME: ${{ matrix.job.platform }}
          TARGET: ${{ matrix.job.target }}
          ARCH: ${{ matrix.job.arch }}
        run: |
          ZIP_FILE_NAME=${{ needs.prepare-release.outputs.zip_name }}-${{ env.PLATFORM_NAME }}_${{ env.ARCH }}.tar.gz
          echo "ZIP_FILE_NAME=$ZIP_FILE_NAME" >> $GITHUB_ENV
          mkdir -pv ./forc-binaries
          for BINARY in forc forc-fmt forc-lsp forc-deploy forc-run forc-doc forc-crypto forc-debug forc-tx; do
            cp "target/${{ matrix.job.target }}/release/$BINARY" ./forc-binaries
          done
          tar -czvf $ZIP_FILE_NAME ./forc-binaries

      - name: Archive forc binaries
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ inputs.upload_url }}
          asset_path: ./${{ env.ZIP_FILE_NAME }}
          asset_name: ${{ env.ZIP_FILE_NAME }}
          asset_content_type: application/gzip
